---
alwaysApply: true
description: Universal programming principles and best practices for 2025
---

# Universal Programming Principles 2025

## Основные принципы

### 1. KISS (Keep It Simple, Stupid) — Простота превыше всего

- **Правило**: Всегда выбирайте самое простое решение, которое работает
- **Практика**:
  - Методы не должны превышать 40-50 строк
  - Каждый метод решает только одну задачу
  - Разбивайте сложные условия на простые блоки
- **Пример**: Вместо `if (!user.isInactive && user.status !== 'banned')` пишите `if (user.isActive)`

### 2. DRY (Don't Repeat Yourself) — Не повторяйтесь

- **Правило**: Каждая часть знаний должна иметь единственное представление в системе
- **Практика**:
  - Выносите повторяющийся код в функции
  - Используйте библиотеки и модули
  - Создавайте переиспользуемые компоненты
- **Важно**: Помните о принципе WET (Write Everything Twice) — дублируйте код только на третье повторение

### 3. YAGNI (You Ain't Gonna Need It) — Вам это не понадобится

- **Правило**: Не реализуйте функции, которые не нужны прямо сейчас
- **Практика**:
  - Сосредоточьтесь на текущих требованиях
  - Избегайте добавления "на всякий случай"
  - Спрашивайте себя: "Действительно ли мне это нужно сейчас?"

## SOLID принципы

### S — Single Responsibility Principle (Принцип единственной ответственности)

- Каждый класс/функция должна иметь только одну причину для изменения
- Один класс = одна задача

### O — Open/Closed Principle (Принцип открытости/закрытости)

- Код должен быть открыт для расширения, но закрыт для модификации
- Используйте интерфейсы и абстракции

### L — Liskov Substitution Principle (Принцип подстановки Лисков)

- Объекты должны быть заменяемы экземплярами их подтипов

### I — Interface Segregation Principle (Принцип разделения интерфейса)

- Клиенты не должны зависеть от методов, которые они не используют

### D — Dependency Inversion Principle (Принцип инверсии зависимостей)

- Зависимости должны строиться на абстракциях, а не на конкретных реализациях

## Чистый код и читаемость

### Имена переменных и функций

- **Используйте осмысленные имена**:
  - ❌ `let x = 10;`
  - ✅ `let retryAttempts = 10;`

- **Имена должны отражать назначение**:
  - ❌ `function calc(a, b) { return a * b * 5; }`
  - ✅ `function calculateTotalPrice(itemPrice, quantity) { return itemPrice * quantity * TAX_RATE; }`

### Функции и методы

- **Функции должны быть короткими** (максимум 20-30 строк)
- **Одна функция = одна задача**
- **Используйте глаголы для имен функций**: `getUserData()`, `validateEmail()`
- **Избегайте глубокой вложенности** — используйте ранние возвраты (guard clauses)

```javascript
// Плохо
function processUser(user) {
  if (user) {
    if (user.isActive) {
      if (user.hasPermission) {
        // обработка
      }
    }
  }
}

// Хорошо
function processUser(user) {
  if (!user) return;
  if (!user.isActive) return;
  if (!user.hasPermission) return;

  // обработка
}
```

### Комментарии

- **Объясняйте "почему", а не "что"**
- **Код должен быть самодокументируемым**
- **Комментируйте сложную бизнес-логику**
- **Обновляйте комментарии вместе с кодом**

## Тестирование

### Основные принципы

- **Пишите тесты для каждой функции**
- **Тестируйте поведение, а не реализацию**
- **Используйте паттерн Arrange-Act-Assert (AAA)**

### Типы тестов (по приоритету)

1. **Unit тесты** — для отдельных функций и методов
2. **Integration тесты** — для взаимодействия компонентов
3. **End-to-End тесты** — для проверки пользовательских сценариев

### Принципы написания тестов

- **Тесты должны быть независимыми**
- **Используйте описательные имена тестов**
- **Один тест = одна проверка**
- **Тесты должны быть быстрыми и стабильными**

## Безопасность

### Базовые принципы

- **Всегда валидируйте пользовательский ввод**
- **Никогда не доверяйте данным извне**
- **Используйте принцип минимальных привилегий**
- **Шифруйте конфиденциальные данные**

### Защита от основных уязвимостей

- **SQL-инъекции**: используйте параметризованные запросы
- **XSS**: экранируйте пользовательский ввод
- **CSRF**: используйте токены защиты
- **Управление сессиями**: правильно настраивайте cookies

## Контроль версий (Git)

### Структура коммитов

- **Атомарные коммиты** — один коммит = одно изменение
- **Описательные сообщения коммитов**:
  ```
  feat: добавить валидацию email
  fix: исправить утечку памяти в кэше
  docs: обновить README
  refactor: вынести общую логику в утилиты
  ```

### Стратегии ветвления

- **Feature Branch Workflow** для большинства проектов:
  - `main/master` — стабильная версия
  - `develop` — разработка
  - `feature/название-функции` — новые возможности
  - `bugfix/описание-бага` — исправления

### Лучшие практики

- **Часто делайте pull/fetch**
- **Делайте code review перед слиянием**
- **Используйте .gitignore для исключения ненужных файлов**
- **Не коммитьте секреты и конфиденциальные данные**

## Документация

### Обязательная документация

- **README.md** — описание проекта и инструкции по запуску
- **CONTRIBUTING.md** — правила для контрибьюторов
- **CHANGELOG.md** — история изменений
- **API документация** — для внешних интерфейсов

### Принципы документирования

- **Пишите для людей, не для машин**
- **Используйте примеры кода**
- **Поддерживайте документацию в актуальном состоянии**
- **Документируйте архитектурные решения**

## Производительность

### Базовые правила

- **Оптимизируйте только после измерения**
- **Используйте подходящие структуры данных**
- **Избегайте преждевременной оптимизации**
- **Профилируйте приложение для выявления узких мест**

### Общие принципы

- **Минимизируйте количество операций ввода/вывода**
- **Кэшируйте результаты дорогих операций**
- **Используйте ленивую загрузку для больших данных**
- **Оптимизируйте запросы к базе данных**

## Code Review

### При создании Pull Request

- **Небольшие изменения** (до 400 строк кода)
- **Описательное название и описание**
- **Самопроверка перед отправкой**
- **Проверяйте, что все тесты проходят**

### При проведении ревью

- **Проверяйте бизнес-логику**
- **Обращайте внимание на безопасность**
- **Оценивайте читаемость кода**
- **Давайте конструктивную обратную связь**
- **Фокусируйтесь на коде, а не на программисте**

## Архитектура и дизайн

### Принципы Clean Architecture

- **Разделение ответственности**
- **Зависимости должны указывать внутрь**
- **Независимость от фреймворков**
- **Тестируемость архитектуры**

### Модульность

- **Слабая связанность** между модулями
- **Высокая связность** внутри модулей
- **Четко определенные интерфейсы**
- **Возможность изолированного тестирования**

## Обработка ошибок

### Основные принципы

- **Fail Fast** — быстро обнаруживайте ошибки
- **Graceful Degradation** — корректная деградация функциональности
- **Логируйте все ошибки с контекстом**
- **Не игнорируйте исключения**

### Лучшие практики

- **Используйте специфичные типы исключений**
- **Валидируйте входные данные**
- **Предоставляйте понятные сообщения об ошибках**
- **Используйте defensive programming**

## Чек-лист перед коммитом

- [ ] Код компилируется без ошибок
- [ ] Все тесты проходят
- [ ] Код следует принципам SOLID
- [ ] Нет дублирования кода (DRY)
- [ ] Используются осмысленные имена
- [ ] Добавлены необходимые тесты
- [ ] Обновлена документация (если нужно)
- [ ] Проведена самопроверка кода
- [ ] Код готов для code review

## Чек-лист для code review

- [ ] Код решает поставленную задачу
- [ ] Логика понятна и корректна
- [ ] Нет очевидных багов
- [ ] Производительность приемлема
- [ ] Безопасность обеспечена
- [ ] Код хорошо тестирован
- [ ] Соблюдены стандарты команды
- [ ] Документация актуальна

## Общие рекомендации для джунов

### Развитие навыков

- **Изучайте один паттерн проектирования в неделю**
- **Читайте чужой код и анализируйте его**
- **Участвуйте в open source проектах**
- **Просите обратную связь от старших коллег**

### Инструменты разработчика

- **Изучите возможности своей IDE**
- **Используйте линтеры и форматировщики кода**
- **Настройте горячие клавиши для ускорения работы**
- **Изучите отладчик своего языка программирования**

### Командная работа

- **Задавайте вопросы, если что-то непонятно**
- **Документируйте принятые решения**
- **Делитесь знаниями с командой**
- **Уважайте coding standards команды**
